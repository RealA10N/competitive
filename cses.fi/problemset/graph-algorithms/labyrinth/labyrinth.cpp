// a10n - Mon Jan 31 13:24:50 2022
// Labyrinth (https://cses.fi/problemset/task/1193)
// Generated by cptk

#include <bits/stdc++.h>
using namespace std;

#define int long long
#define all(x) (x).begin(), (x).end()
#define fori(n, i) for (int i = 0; i < n; i++)

map<char, pair<int, int>> moves = {
    {'L', {0, -1}},
    {'R', {0, 1}},
    {'U', {-1, 0}},
    {'D', {1, 0}},
};

const int maxn = 1005;
char b[maxn][maxn];
char e[maxn][maxn];

signed main() {
    cin.tie(NULL)->sync_with_stdio(false);
    int n, m;
    cin >> n >> m;

    queue<pair<int, int>> q;
    fori(n, i) fori(m, j) {
        cin >> b[i][j];
        e[i][j] = 0;
        if (b[i][j] == 'A') q.push({i, j});
    }

    int i, j;
    bool found = false;
    while (!q.empty()) {
        tie(i, j) = q.front();
        q.pop();
        if (b[i][j] == 'B') {
            found = true;
            break;
        }
        for (auto mv : moves) {
            char ltr = mv.first;
            int ni = i + mv.second.first, nj = j + mv.second.second;
            if (ni < 0 || ni >= n || nj < 0 || nj >= m) continue;
            if (e[ni][nj] || b[ni][nj] == '#') continue;
            q.push({ni, nj});
            e[ni][nj] = ltr;
        }
    }

    cout << (found ? "YES" : "NO") << endl;
    if (found) {
        stack<char> path;
        while (b[i][j] != 'A') {
            char ltr = e[i][j];
            path.push(ltr);
            i -= moves[ltr].first;
            j -= moves[ltr].second;
        }
        cout << path.size() << endl;
        while (!path.empty()) {
            cout << path.top();
            path.pop();
        }
        cout << endl;
    }
}
