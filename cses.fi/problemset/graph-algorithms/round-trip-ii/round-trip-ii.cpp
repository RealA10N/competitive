// a10n - Wed Mar 30 10:36:31 2022
// Round Trip II (https://cses.fi/problemset/task/1678)
// Generated by cptk

#include <bits/stdc++.h>
using namespace std;

#define int long long
#define all(x) (x).begin(), (x).end()
#define fori(n, i) for (int i = 0; i < n; i++)

enum State { UNVISITED, EXPLORING, DONE };
typedef vector<int> vi;
const int maxn = 1e5 + 5;

State state[maxn];
int from[maxn];
vi g[maxn];

void print(int u) {
    stack<int> s;
    s.push(u);
    int v = from[u];
    while (v != u) {
        s.push(v);
        v = from[v];
    }
    s.push(u);
    cout << s.size() << endl;
    while (s.size()) {
        cout << s.top() << ' ';
        s.pop();
    }
}

void dfs(int u) {
    if (state[u] == EXPLORING) print(u), exit(0);
    if (state[u] == DONE) return;
    if (state[u] == UNVISITED) {
        state[u] = EXPLORING;
        for (int v : g[u]) from[v] = u, dfs(v);
        state[u] = DONE;
    }
}

signed main() {
    cin.tie(NULL)->sync_with_stdio(false);
    int n, m;
    cin >> n >> m;
    fori(m, i) {
        int a, b;
        cin >> a >> b;
        g[a].push_back(b);
    }

    fori(maxn, i) state[i] = UNVISITED;
    for (int i = 1; i <= n; i++) dfs(i);
    cout << "IMPOSSIBLE" << endl;
}
