// a10n - Mon Apr 11 10:56:21 2022
// Line Segment Intersection (https://cses.fi/problemset/task/2190)
// Generated by cptk

#include <bits/stdc++.h>
using namespace std;

#define int long long
#define all(x) (x).begin(), (x).end()
#define fori(n, i) for (int i = 0; i < n; i++)

#define x first
#define y second
typedef pair<int, int> ii;

int sign(int i) { return (i == 0 ? 0 : (i > 0 ? 1 : -1)); }
ii operator-(ii p1, ii p2) { return ii{p1.x - p2.x, p1.y - p2.y}; }
int operator*(ii p1, ii p2) { return p1.x * p2.y - p2.x * p1.y; }
istream& operator>>(istream& in, ii& p) { return cin >> p.x >> p.y; }

bool inseg(ii p0, ii p1, ii p2) {
    // assumes that all points on the same line,
    // returns true if p0 between p1 and p2
    if (p1 > p2) swap(p1, p2);
    return p1 <= p0 && p0 <= p2;
}

int ori(ii a, ii b, ii c) {
    ii ab = c - a;
    ii ac = b - a;
    return sign(ab * ac);
}

bool solve() {
    ii p1, p2, p3, p4;
    cin >> p1 >> p2 >> p3 >> p4;

    int c1 = ori(p1, p2, p3);
    int c2 = ori(p1, p2, p4);
    int c3 = ori(p3, p4, p1);
    int c4 = ori(p3, p4, p2);

    if (c1 && c2 && c3 && c4) return c1 != c2 && c3 != c4;

    if (!c1 && !c2 && !c3 && !c4)
        return inseg(p1, p3, p4) || inseg(p2, p3, p4) || inseg(p3, p1, p2) ||
               inseg(p4, p1, p2);

    if (c1 == 0 && inseg(p3, p1, p2)) return true;
    if (c2 == 0 && inseg(p4, p1, p2)) return true;
    if (c3 == 0 && inseg(p1, p3, p4)) return true;
    if (c4 == 0 && inseg(p2, p3, p4)) return true;
    return false;
}

signed main() {
    cin.tie(NULL)->sync_with_stdio(false);
    int t;
    cin >> t;
    while (t--) cout << (solve() ? "YES" : "NO") << endl;
}
