// a10n - Mon Apr 11 14:31:11 2022
// Point in Polygon (https://cses.fi/problemset/task/2192)
// Generated by cptk

#include <bits/stdc++.h>
using namespace std;

#define int long long
#define all(x) (x).begin(), (x).end()
#define fori(n, i) for (int i = 0; i < n; i++)

#define x first
#define y second
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;

int sign(int a) { return (a == 0 ? 0 : (a > 0 ? 1 : -1)); }
ii operator+(ii p1, ii p2) { return ii{p1.x + p2.x, p1.y + p2.y}; }
ii operator-(ii p1, ii p2) { return ii{p1.x - p2.x, p1.y - p2.y}; }
int operator*(ii p1, ii p2) { return p1.x * p2.y - p2.x * p1.y; }
istream& operator>>(istream& in, ii& p) { return cin >> p.x >> p.y; }

const int oo = 2e9 + 5;

int ori(ii a, ii b, ii c) {
    ii ab = c - a;
    ii ac = b - a;
    return sign(ab * ac);
}

bool onseg(ii p0, ii p1, ii p2) {
    if (ori(p0, p1, p2)) return false;
    if (p1 > p2) swap(p1, p2);
    return p1 <= p0 && p0 <= p2;
}

bool intersect(ii p0, ii p1, ii p2, ii p3) {
    return ori(p0, p1, p2) != ori(p0, p1, p3) &&
           ori(p2, p3, p0) != ori(p2, p3, p1);
}

void inside(const vii& pol, ii p0) {
    ii p1 = p0 + ii{1, oo};

    int c = 0;
    fori(pol.size() - 1, i) {
        if (onseg(p0, pol[i], pol[i + 1]))
            return cout << "BOUNDARY" << endl, void();
        if (intersect(p0, p1, pol[i], pol[i + 1])) c++;
    }

    cout << (c & 1 ? "INSIDE" : "OUTSIDE") << endl;
}

signed main() {
    cin.tie(NULL)->sync_with_stdio(false);
    cout << fixed << setprecision(10);

    int n, m;
    cin >> n >> m;

    vii pol(n + 1);
    fori(n, i) cin >> pol[i];
    pol[n] = pol[0];

    while (m--) {
        ii p0;
        cin >> p0;
        inside(pol, p0);
    }
}
