// a10n - Tue Mar 15 09:32:35 2022
// Sliding Cost (https://cses.fi/problemset/task/1077)
// Generated by cptk

// clang-format off
#include <bits/stdc++.h>
using namespace std;
void _main();
#define int long long
#define all(x) (x).begin(), (x).end()
#define fori(n, i) for (int i = 0; i < n; i++)
#define main signed main() { cin.tie(NULL)->sync_with_stdio(false); \
    cout<<fixed<<setprecision(10); _main(); } void _main()
typedef vector<int> vi;
typedef pair<int, int> ii;
// clang-format on

template <typename T>
struct median_set {
    multiset<T> lo, hi;

    T median() {
        balance();
        return *hi.begin();
    }

    void balance() {
        while (hi.size() > lo.size()) {
            auto t = hi.begin();
            lo.insert(*t), hi.erase(t);
        }

        while (lo.size() > hi.size()) {
            auto t = lo.rbegin();
            hi.insert(*t), lo.erase(lo.find(*t));
        }
    };

    void insert(T v) {
        if (v >= *hi.begin())
            hi.insert(v);
        else
            lo.insert(v);
    }

    void erase(T v) {
        auto t = lo.find(v);
        if (t != lo.end())
            lo.erase(t);
        else {
            t = hi.find(v);
            if (t != hi.end()) hi.erase(t);
        }
    }
};

main {
    int n, k;
    cin >> n >> k;

    vi a(n);
    fori(n, i) cin >> a[i];

    median_set<int> s;
    int c = 0, losz = k / 2, hisz = (k + 1) / 2;
    fori(k, i) s.insert(a[i]);

    int m = s.median();
    fori(k, i) c += abs(a[i] - m);
    cout << c << ' ';

    for (int i = k; i < n; i++) {
        s.erase(a[i - k]), s.insert(a[i]);
        c -= abs(m - a[i - k]), c += abs(a[i] - m);

        int nm = s.median();
        int dm = abs(nm - m);
        if (nm > m) {
            c -= hisz * dm;
            c += losz * dm;
        } else if (nm < m) {
            c -= (losz + 1) * dm;
            c += (hisz - 1) * dm;
        }

        c = abs(c), m = nm;
        cout << c << ' ';
    }

    cout << endl;
}
