// a10n - Mon Feb  7 22:11:06 2022
// Grid Paths (https://cses.fi/problemset/task/1625)
// Generated by cptk

#include <iostream>
using std::cout, std::cin, std::endl;

#define fori(n, i) for (int i = 0; i < n; i++)

const int SZ = 7, DSZ = 4;
const int DY[DSZ] = {0, 0, 1, -1};
const int DX[DSZ] = {1, -1, 0, 0};
const char DC[DSZ] = {'D', 'U', 'R', 'L'};

char pattern[(SZ * SZ) - 1];
bool visited[SZ][SZ];

#define blocked(x, y) \
    ((x) >= SZ || (x) < 0 || (y) >= SZ || (y) < 0 || visited[x][y])

inline bool blocks(int pi, int pj, int di, int dj) {
    if (!blocked(pi + di, pj + dj)) return false;
    if (di == 0)
        return (!blocked(pi + 1, pj)) && (!blocked(pi - 1, pj));
    else
        return (!blocked(pi, pj + 1)) && (!blocked(pi, pj - 1));
}

int solve(int i, int j, int depth) {
    if (depth == SZ * SZ - 1) return true;
    if (i == SZ - 1 && j == 0) return false;

    int c = 0;
    visited[i][j] = true;

    fori(DSZ, d) {
        int di = DX[d], dj = DY[d];
        char ltr = DC[d];

        if (i + di < 0 || i + di >= SZ || j + dj < 0 || j + dj >= SZ) continue;
        if (pattern[depth] != '?' && ltr != pattern[depth]) continue;
        if (visited[i + di][j + dj]) continue;
        if (blocks(i + di, j + dj, di, dj)) continue;

        c += solve(i + di, j + dj, depth + 1);
    }

    visited[i][j] = false;
    return c;
}

signed main() {
    cin.tie(NULL)->sync_with_stdio(false);
    fori(SZ * SZ - 1, i) cin >> pattern[i];
    fori(SZ, i) fori(SZ, j) visited[i][j] = false;
    cout << solve(0, 0, 0) << endl;
}
